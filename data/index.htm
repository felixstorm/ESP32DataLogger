<!doctype html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Data Stream</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="uPlot.min.css">
    <script src="uPlot.iife.min.js"></script>

    <script>
      var u;

      window.onload = () => { updateOrMakeChart(); }

      function updateOrMakeChart(timestampMin, timestampMax) {
        let wait = document.getElementById("wait");
        wait.textContent = "Fetching data....";
        const params = new URLSearchParams();
        if (timestampMin) { params.append("from", timestampMin); }
        if (timestampMax) { params.append("until", timestampMax); }
        fetch("/data?" + params).then(r => r.json()).then(packed => {
          wait.textContent = "Rendering...";
          let data = prepData(packed);
          //console.log(`data: first = ${data[0][0]}, last = ${data[0][data[0].length - 1]})`);
          if (!u) {
            u = makeChart(data);
            new EventSource("/dataevents").onmessage = (event) => {
              // console.log(`received message ${event.data}`);
              const jsonRecord = JSON.parse(event.data);
              const messageTimestamp = jsonRecord[0];
              const messageTimestampIsValid = messageTimestamp >= 1609455600 // 2021-01-01
              const uIsEmpty = u.data[0].length == 0;
              const uDataLatestTimestamp = u.data[0][u.data[0].length - 1];
              const xScaleMax = u.scales.x.max;
              const addMessage = messageTimestampIsValid && (uIsEmpty || (Math.abs(messageTimestamp-xScaleMax) < 70 && messageTimestamp > uDataLatestTimestamp));
              // console.log(`messageTimestamp: ${messageTimestamp}, messageTimestampIsValid: ${messageTimestampIsValid}, uIsEmpty: ${uIsEmpty}, uDataLatestTimestamp: ${uDataLatestTimestamp}, xScaleMax: ${xScaleMax}, addMessage: ${addMessage}`);
              if (addMessage) {
                u.data[0].push(jsonRecord[0]);
                u.data[1].push(jsonRecord[1]);
                u.data[2].push(jsonRecord[2]);
                u.setData(u.data, false);
                u.setScale('x', {
                  min: uIsEmpty ? messageTimestamp - 1 : u.scales.x.min,
                  max: u.data[0][u.data[0].length - 1],
                });
              }
            }
          } else {
            u.setData(data);
          }
          wait.textContent = "Done!";
        });
      }
      
      function prepData(packed) {

        let data = [
          Array(packed.length),
          Array(packed.length),
          Array(packed.length),
        ];

        for (let i = 0; i < packed.length; i++) {
          data[0][i] = packed[i][0];
          data[1][i] = packed[i][1];
          data[2][i] = packed[i][2];
        }

        return data;
      }

      function getSize() {
        return {
          width: window.innerWidth - 100,
          height: window.innerHeight - 200,
        }
      }
      
      function debounce(fn, time) {
      	let pending = null;
      	function run() {
      		pending = null;
      		fn();
      	}
      	return function() {
      		clearTimeout(pending);
      		pending = setTimeout(run, time);
      	}
      }
      let fetchDataDebounced = debounce(() => {
        if (u.scales.x.min < u.data[0][0] || u.scales.x.max > u.data[0][u.data[0].length - 1] ) {
          updateOrMakeChart(u.scales.x.min, u.scales.x.max);
        }
      }, 500)

      
      function wheelZoomPlugin(opts) {
        let factor = opts.factor || 0.75;

        let xMin, xMax, yMin, yMax, xRange, yRange;

        function clamp(nRange, nMin, nMax, fRange, fMin, fMax) {
          if (nRange > fRange) {
            nMin = fMin;
            nMax = fMax;
          }
          else if (nMin < fMin) {
            nMin = fMin;
            nMax = fMin + nRange;
          }
          else if (nMax > fMax) {
            nMax = fMax;
            nMin = fMax - nRange;
          }

          return [nMin, nMax];
        }

        return {
          hooks: {
            ready: u => {
              let plot = u.root.querySelector(".u-over");
              let rect = plot.getBoundingClientRect();

              // wheel drag pan
              plot.addEventListener("mousedown", e => {
                if (e.button == 1) {
                  e.preventDefault();

                  let left0 = e.clientX;
                  let scXMin0 = u.scales.x.min;
                  let scXMax0 = u.scales.x.max;
                  let xUnitsPerPx = u.posToVal(1, 'x') - u.posToVal(0, 'x');

                  function onmove(e) {
                    e.preventDefault();

                    let left1 = e.clientX;
                    let dx = xUnitsPerPx * (left1 - left0);
                    u.setScale('x', {
                      min: scXMin0 - dx,
                      max: scXMax0 - dx,
                    });
                  }

                  function onup(e) {
                    document.removeEventListener("mousemove", onmove);
                    document.removeEventListener("mouseup", onup);
                    fetchDataDebounced();
                  }
                  
                  document.addEventListener("mousemove", onmove);
                  document.addEventListener("mouseup", onup);
                }
              });

              // wheel scroll zoom
              plot.addEventListener("wheel", e => {
                e.preventDefault();

                let left = u.cursor.left;
                let leftPct = left/rect.width;
                let xVal = u.posToVal(left, "x");
                let oxRange = u.scales.x.max - u.scales.x.min;

                let nxRange = e.deltaY < 0 ? oxRange * factor : oxRange / factor;
                let nxMin = xVal - leftPct * nxRange;
                let nxMax = nxMin + nxRange;

                u.batch(() => {
                  u.setScale("x", {
                    min: nxMin,
                    max: nxMax,
                  });
                });
                fetchDataDebounced();
              });
            }
          }
        };
      }

      function makeChart(data) {

        const opts = {
          title: "Current / Voltage",
          ...getSize(),
          plugins: [
            wheelZoomPlugin({factor: 0.75})
          ],
          cursor: {
            drag: {
              setScale: false,
            }
          },
          select: {
            show: false,
          },
          series: [
            {
              value: "{YYYY}-{MM}-{DD} {HH}:{mm}:{ss}"
            },
            {
              label: "Current",
              value: (u, v) => v == null ? "-" : v.toFixed(0) + " mA",
              stroke: "red",
              scale: "mA",
            },
            {
              label: "Voltage",
              value: (u, v) => v == null ? "-" : (v / 1000).toFixed(2) + " V",
              stroke: "blue",
              scale: "mV",
            }
          ],
          axes: [
            {
              values: [
                // tick incr  default       year                        month day                    hour  min                sec   mode 
                [3600*24*365,"{YYYY}",      null,                       null, null,                  null, null,              null, 1],
                [3600*24*28, "{MMM}",       "\n{YYYY}",                 null, null,                  null, null,              null, 1],
                [3600*24,    "{D}/{M}",     "\n{YYYY}",                 null, null,                  null, null,              null, 1],
                [3600,       "{HH}",        "\n{D}/{M}/{YY}",           null, "\n{D}/{M}",           null, null,              null, 1],
                [60,         "{HH}:{mm}",   "\n{D}/{M}/{YY}",           null, "\n{D}/{M}",           null, null,              null, 1],
                [1,          ":{ss}",       "\n{D}/{M}/{YY} {HH}:{mm}", null, "\n{D}/{M} {HH}:{mm}", null, "\n{HH}:{mm}",     null, 1],
                [0.001,      ":{ss}.{fff}", "\n{D}/{M}/{YY} {HH}:{mm}", null, "\n{D}/{M} {HH}:{mm}", null, "\n{HH}:{mm}",     null, 1],
                ],
            },
            {
              scale: "mA",
              values: (self, ticks) => ticks.map(rawValue => rawValue.toFixed(0) + " mA"),
            },
            {
              scale: "mV",
              values: (self, ticks) => ticks.map(rawValue => (rawValue / 1000).toFixed(2) + " V"),
              side: 1,
              grid: {show: false},
            },
          ],
          scales: {
            "mA": {
              range: {
                min: { pad: 0, soft: 0, mode: 1 },
                max: { pad: 0, soft: 0, mode: 1 },
              }
            },
            "mV": {
              range: {
                min: { pad: 0, soft: 0, mode: 1 },
                max: { pad: 0, soft: 0, mode: 1 },
              }
            },
          },
          hooks: {
            init: [
              u => {
                u.root.querySelector(".u-over").ondblclick = e => {
                  updateOrMakeChart();
                }
              }
            ],
          },
        };

        let plot = new uPlot(opts, data, document.getElementById("chart"));
        
        window.addEventListener("resize", e => { plot.setSize(getSize()); });
        
        return plot;
      }
    </script>
  </head>

  <body>
    <div id="chart"></div>
    <h2 id="wait">Loading lib....</h2>
  </body>
</html>